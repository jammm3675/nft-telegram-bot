import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import BOT_TOKEN, COLLECTIONS, MAIN_MENU_IMAGE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# =–ö–õ–ê–í–ò–ê–¢–£–†–ê=
def main_menu_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("Not Coin", callback_data="Not Coin"),
            InlineKeyboardButton("Lost Dogs", callback_data="Lost Dogs"),
        ],
        [
            InlineKeyboardButton("Not pixel", callback_data="Not pixel"),
            InlineKeyboardButton("Dogs OG", callback_data="Dogs OG"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def collection_keyboard(collection_name):
    keyboard = [
        [InlineKeyboardButton("üñºÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∏–∫–µ—Ä", url=COLLECTIONS[collection_name]["sticker_url"])],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"),
            InlineKeyboardButton("üè† Home", callback_data="home")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# =–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î=
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_photo(
            photo=MAIN_MENU_IMAGE,
            caption="üåü **NFT Marketplace**\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é:",
            reply_markup=main_menu_keyboard(),
            parse_mode="Markdown"
        )
    else:
        query = update.callback_query
        await query.answer()
        media = InputMediaPhoto(
            media=MAIN_MENU_IMAGE,
            caption="üåü **NFT Marketplace**\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é:",
            parse_mode="Markdown"
        )
        await query.edit_message_media(media=media)
        await query.edit_message_reply_markup(reply_markup=main_menu_keyboard())

async def show_collection(update: Update, context: ContextTypes.DEFAULT_TYPE, collection_name: str) -> None:
    query = update.callback_query
    await query.answer()
    
    collection = COLLECTIONS[collection_name]
    caption = (
        f"‚ú® **{collection_name}** ‚ú®\n\n"
        f"{collection['description']}\n\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {collection['items']}\n"
        f"üí∞ –¶–µ–Ω–∞: {collection['price']}"
    )
    
    media = InputMediaPhoto(
        media=collection['image'],
        caption=caption,
        parse_mode="Markdown"
    )
    
    await query.edit_message_media(media=media)
    await query.edit_message_reply_markup(reply_markup=collection_keyboard(collection_name))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    data = query.data
    
    if data in COLLECTIONS:
        await show_collection(update, context, data)
    elif data == "back" or data == "home":
        await show_main_menu(update, context)

# =–ó–ê–ü–£–°–ö –ë–û–¢–ê=
def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    application.run_polling()

if __name__ == "__main__":
    main()
